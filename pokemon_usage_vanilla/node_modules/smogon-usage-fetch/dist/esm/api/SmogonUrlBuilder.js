import { formatToString } from "../parsing/format";
import { timeframeToString } from "../parsing/timeframe";
/**
 * Builder for smogon stat URLs.
 * Note: No validation for an existing URL are made, callers have to ensure their access to this class is sane.
 *
 * @private
 */
class SmogonUrlBuilder {
    /**
     * Creates a new instance.
     *
     * @param baseUrl Base URL to use.
     */
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
    }
    setTimeframe(timeframe) {
        this.timeframe = timeframe;
        return this;
    }
    setFormat(format) {
        this.format = format;
        return this;
    }
    setSubPath(path) {
        this.subPath = path;
        return this;
    }
    setFileType(fileType) {
        this.fileType = fileType;
        return this;
    }
    /**
     * Builds the current instance and returns the URL.
     *
     * @return Built URL.
     */
    build() {
        var _a;
        const pathParts = [];
        if (this.timeframe != null) {
            pathParts.push(timeframeToString(this.timeframe));
        }
        if (((_a = this.format) === null || _a === void 0 ? void 0 : _a.monotype) != null) {
            pathParts.push("monotype" /* MONOTYPE */);
        }
        if (this.subPath != null) {
            pathParts.push(this.subPath);
        }
        if (this.format != null) {
            let fileName = formatToString(this.format);
            if (this.fileType != null) {
                fileName += "." + this.fileType;
            }
            pathParts.push(fileName);
        }
        const path = pathParts.join("/");
        return new URL(path, this.baseUrl);
    }
}
export { SmogonUrlBuilder };
//# sourceMappingURL=SmogonUrlBuilder.js.map