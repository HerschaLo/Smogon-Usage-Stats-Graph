import type { Movesets } from "../model/movesets";
import type { Format } from "../model/format";
import type { Leads } from "../model/leads";
import type { Metagame } from "../model/metagame";
import type { Timeframe } from "../model/timeframe";
import type { Usages } from "../model/usages";
/**
 * API Client config.
 *
 * @public
 */
interface SmogonApiClientConfig {
    /**
     * Optional base URL to use instead of the default smogon stats URL.
     * Useful for CORS-related proxies.
     */
    baseUrl: URL;
}
/**
 * API client to load data from Smogon API.
 *
 * @public
 */
declare class SmogonApiClient {
    #private;
    private static readonly API_BASE_URL;
    /**
     * Creates a new instance.
     *
     * @param config Client config. See {@link SmogonApiClientConfig}.
     */
    constructor(config?: Partial<SmogonApiClientConfig>);
    /**
     * Loads a list of all available timeframes.
     *
     * @public
     * @return List of timeframe names.
     */
    fetchTimeframes(): Promise<Timeframe[]>;
    /**
     * Loads a list of all available formats for a given timeframe.
     *
     * @public
     * @param timeframe Timeframe to load.
     * @param useMonotype If monotype formats should be loaded instead of "normal" formats, defaults to false.
     * @return List of formats.
     */
    fetchFormats(timeframe: Timeframe, useMonotype?: boolean): Promise<Format[]>;
    /**
     * Loads usage data for the given timeframe and format.
     *
     * @public
     * @param timeframe Timeframe to load.
     * @param format Format to load.
     * @return Usages data.
     */
    fetchUsages(timeframe: Timeframe, format: Format): Promise<Usages>;
    /**
     * Loads lead data for the given timeframe and format.
     *
     * @public
     * @param timeframe Timeframe to load.
     * @param format Format to load.
     * @return Leads data.
     */
    fetchLeads(timeframe: Timeframe, format: Format): Promise<Leads>;
    /**
     * Loads metagame data for the given timeframe and format.
     *
     * @public
     * @param timeframe Timeframe to load.
     * @param format Format to load.
     * @return Metagame data.
     */
    fetchMetagame(timeframe: Timeframe, format: Format): Promise<Metagame>;
    /**
     * Loads moveset data for the given timeframe and format.
     *
     * Note: The `/chaos/` and the `/moveset/` endpoints are identical in terms of data.
     * Previously this method aliased to `fetchChaos` which was removed for consistency.
     *
     * @public
     * @param timeframe Timeframe to load.
     * @param format Format to load.
     * @return Moveset data.
     */
    fetchMovesets(timeframe: Timeframe, format: Format): Promise<Movesets>;
    private createUrlBuilder;
    private request;
}
export { SmogonApiClientConfig, SmogonApiClient };
//# sourceMappingURL=SmogonApiClient.d.ts.map